--- a/docs/formatdomain.html.in	
+++ a/docs/formatdomain.html.in	
@@ -2503,6 +2503,25 @@ 
   &lt;/devices&gt;
   ...</pre>
 
+    <h5><a name="elementsNICSVde">Userspace VDE stack</a></h5>
+
+    <p>
+      Provides a connection to virtual distributed ethernet network.
+      This is an option for unprivileged users who need their
+      VMs to have outgoing access, as well as connectivity between
+      mutliple virtual machines.
+    </p>
+
+<pre>
+  ...
+  &lt;devices&gt;
+    &lt;interface type='vde'&gt;
+      &lt;mac address="00:11:22:33:44:55"/&gt;
+      &lt;switch path="/tmp/vde.ctl"/&gt;
+    &lt;/interface&gt;
+  &lt;/devices&gt;
+  ...</pre>
+
 
     <h5><a name="elementsNICSEthernet">Generic ethernet connection</a></h5>
 
--- a/src/conf/domain_conf.c	
+++ a/src/conf/domain_conf.c	
@@ -303,7 +303,8 @@ VIR_ENUM_IMPL(virDomainNet, VIR_DOMAIN_NET_TYPE_LAST,
               "bridge",
               "internal",
               "direct",
-              "hostdev")
+              "hostdev",
+	             "vde")
 
 VIR_ENUM_IMPL(virDomainNetBackend, VIR_DOMAIN_NET_BACKEND_TYPE_LAST,
               "default",
@@ -1088,6 +1089,10 @@ void virDomainNetDefFree(virDomainNetDefPtr def)
         virDomainHostdevDefClear(&def->data.hostdev.def);
         break;
 
+    case VIR_DOMAIN_NET_TYPE_VDE:
+        VIR_FREE(def->data.vde.vdeswitch);
+	break;
+
     case VIR_DOMAIN_NET_TYPE_USER:
     case VIR_DOMAIN_NET_TYPE_LAST:
         break;
@@ -4722,6 +4727,7 @@ virDomainNetDefParseXML(virCapsPtr caps,
     char *mode = NULL;
     char *linkstate = NULL;
     char *addrtype = NULL;
+    char *vdeswitch = NULL;
     virNWFilterHashTablePtr filterparams = NULL;
     virDomainActualNetDefPtr actual = NULL;
     xmlNodePtr oldnode = ctxt->node;
@@ -4857,6 +4863,10 @@ virDomainNetDefParseXML(virCapsPtr caps,
             } else if (xmlStrEqual(cur->name, BAD_CAST "vlan")) {
                 if (virNetDevVlanParse(cur, ctxt, &def->vlan) < 0)
                     goto error;
+            } else if ((vdeswitch == NULL) &&
+                    def->type == VIR_DOMAIN_NET_TYPE_VDE &&
+                    xmlStrEqual(cur->name, BAD_CAST "switch")) {
+                vdeswitch = virXMLPropString(cur, "path");
             }
         }
         cur = cur->next;
@@ -5039,6 +5049,11 @@ virDomainNetDefParseXML(virCapsPtr caps,
         }
         break;
 
+    case VIR_DOMAIN_NET_TYPE_VDE:
+        def->data.vde.vdeswitch = vdeswitch;
+        vdeswitch = NULL;
+        break;
+
     case VIR_DOMAIN_NET_TYPE_USER:
     case VIR_DOMAIN_NET_TYPE_LAST:
         break;
@@ -12259,6 +12274,12 @@ virDomainNetDefFormat(virBufferPtr buf,
         }
         break;
 
+    case VIR_DOMAIN_NET_TYPE_VDE:
+        if (def->data.vde.vdeswitch)
+          virBufferEscapeString(buf, "      <switch path='%s'/>\n",
+              def->data.vde.vdeswitch);
+        break;
+
     case VIR_DOMAIN_NET_TYPE_USER:
     case VIR_DOMAIN_NET_TYPE_LAST:
         break;
--- a/src/conf/domain_conf.h	
+++ a/src/conf/domain_conf.h	
@@ -735,6 +735,7 @@ enum virDomainNetType {
     VIR_DOMAIN_NET_TYPE_INTERNAL,
     VIR_DOMAIN_NET_TYPE_DIRECT,
     VIR_DOMAIN_NET_TYPE_HOSTDEV,
+    VIR_DOMAIN_NET_TYPE_VDE,
 
     VIR_DOMAIN_NET_TYPE_LAST
 };
@@ -841,6 +842,9 @@ struct _virDomainNetDef {
         struct {
             virDomainHostdevDef def;
         } hostdev;
+        struct {
+            char *vdeswitch;
+        } vde;
     } data;
     /* virtPortProfile is used by network/bridge/direct/hostdev */
     virNetDevVPortProfilePtr virtPortProfile;
--- a/src/lxc/lxc_process.c	
+++ a/src/lxc/lxc_process.c	
@@ -528,6 +528,7 @@ static int virLXCProcessSetupInterfaces(virConnectPtr conn,
         case VIR_DOMAIN_NET_TYPE_CLIENT:
         case VIR_DOMAIN_NET_TYPE_MCAST:
         case VIR_DOMAIN_NET_TYPE_INTERNAL:
+	case VIR_DOMAIN_NET_TYPE_VDE:
         case VIR_DOMAIN_NET_TYPE_LAST:
             virReportError(VIR_ERR_INTERNAL_ERROR,
                            _("Unsupported network type %s"),
--- a/src/qemu/qemu_command.c	
+++ a/src/qemu/qemu_command.c	
@@ -3159,6 +3159,14 @@ qemuBuildHostNetStr(virDomainNetDefPtr net,
        type_sep = ',';
        break;
 
+    case VIR_DOMAIN_NET_TYPE_VDE:
+        virBufferAddLit(&buf, "vde");
+        if (net->data.vde.vdeswitch)
+          virBufferAsprintf(&buf, "%csock=%s",
+              type_sep,
+              net->data.vde.vdeswitch);
+        break;
+
     case VIR_DOMAIN_NET_TYPE_USER:
     default:
         virBufferAddLit(&buf, "user");
--- a/src/uml/uml_conf.c	
+++ a/src/uml/uml_conf.c	
@@ -261,6 +261,14 @@ umlBuildCommandLineNet(virConnectPtr conn,
                        _("hostdev networking type not supported"));
         goto error;
 
+    case VIR_DOMAIN_NET_TYPE_VDE:
+        /* ethNNN=vde,vde_switch,macaddr,port,group,mode,description */
+        if (def->data.vde.vdeswitch) {
+          virBufferAsprintf(&buf, "vde,%s", def->data.vde.vdeswitch);
+        } else
+          virBufferAddLit(&buf, "vde");
+        break;
+
     case VIR_DOMAIN_NET_TYPE_LAST:
         break;
     }
--- a/src/xenxs/xen_sxpr.c	
+++ a/src/xenxs/xen_sxpr.c	
@@ -1981,6 +1981,7 @@ xenFormatSxprNet(virConnectPtr conn,
     case VIR_DOMAIN_NET_TYPE_INTERNAL:
     case VIR_DOMAIN_NET_TYPE_DIRECT:
     case VIR_DOMAIN_NET_TYPE_HOSTDEV:
+    case VIR_DOMAIN_NET_TYPE_VDE:
     case VIR_DOMAIN_NET_TYPE_LAST:
         break;
     }
