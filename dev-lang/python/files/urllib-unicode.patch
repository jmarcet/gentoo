--- ./Lib/urllib.py-orig	2013-07-19 20:19:05.746736174 +0200
+++ ./Lib/urllib.py	2013-07-19 20:17:05.658747436 +0200
@@ -1322,36 +1322,29 @@ def urlencode(query, doseq=0):
             raise TypeError, "not a valid non-string sequence or mapping object", tb
 
     l = []
-    if not doseq:
-        # preserve old behavior
-        for k, v in query:
-            k = quote_plus(str(k))
-            v = quote_plus(str(v))
+    for k, v in query:
+        k = quote_plus(str(k))
+        if isinstance(v, str):
+            v = quote_plus(v)
             l.append(k + '=' + v)
-    else:
-        for k, v in query:
-            k = quote_plus(str(k))
-            if isinstance(v, str):
-                v = quote_plus(v)
-                l.append(k + '=' + v)
-            elif _is_unicode(v):
-                # is there a reasonable way to convert to ASCII?
-                # encode generates a string, but "replace" or "ignore"
-                # lose information and "strict" can raise UnicodeError
-                v = quote_plus(v.encode("ASCII","replace"))
+        elif _is_unicode(v):
+            # is there a reasonable way to convert to ASCII?
+            # encode generates a string, but "replace" or "ignore"
+            # lose information and "strict" can raise UnicodeError
+            v = quote_plus(v.encode("ASCII","replace"))
+            l.append(k + '=' + v)
+        else:
+            try:
+                # is this a sufficient test for sequence-ness?
+                len(v)
+            except TypeError:
+                # not a sequence
+                v = quote_plus(str(v))
                 l.append(k + '=' + v)
             else:
-                try:
-                    # is this a sufficient test for sequence-ness?
-                    len(v)
-                except TypeError:
-                    # not a sequence
-                    v = quote_plus(str(v))
-                    l.append(k + '=' + v)
-                else:
-                    # loop over the sequence
-                    for elt in v:
-                        l.append(k + '=' + quote_plus(str(elt)))
+                # loop over the sequence
+                for elt in v:
+                    l.append(k + '=' + quote_plus(str(elt)))
     return '&'.join(l)
 
 # Proxy handling
